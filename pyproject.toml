[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "scvi-tools"
version = "1.4.0"
description = "Deep probabilistic analysis of single-cell omics data."
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "The scvi-tools development team"},
]
maintainers = [
    {name = "The scvi-tools development team", email = "ori.kronfeld@weizmann.ac.il"},
]

urls.Documentation = "https://scvi-tools.org"
urls.Source = "https://github.com/scverse/scvi-tools"
urls.Home-page = "https://scvi-tools.org"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
    "anndata>=0.11",
    "docrep>=0.3.2",
    "lightning>=2.0",
    "ml-collections",
    "mudata",
    "numba>=0.60.0",
    "numpy",
    "pandas",
    "pyro-ppl",
    "rich",
    "scanpy[skmisc]>=1.10",
    "scikit-learn",
    "scipy",
    "sparse>=0.14.0",
    "tensorboard",
    "torch",
    "torchmetrics",
    "tqdm",
    "xarray",
]

[project.optional-dependencies]
tests = ["pytest", "pytest-pretty", "coverage", "scvi-tools[optional]"]
editing = ["jupyter", "pre-commit"]
dev = ["scvi-tools[editing,tests]"]
test = ["scvi-tools[tests]"]
cuda = ["torchvision", "torchaudio", "jax[cuda12]"]
metal = ["torchvision", "torchaudio", "jax-metal"]

docs = [
    "docutils>=0.8,!=0.18.*,!=0.19.*", # see https://github.com/scverse/cookiecutter-scverse/pull/205
    "sphinx",
    "ipython",
    "sphinx-book-theme>=1.0.1",
    "sphinx_copybutton",
    "sphinx-design",
    "sphinxext-opengraph",
    "sphinx-hoverxref",
    "sphinxcontrib-bibtex",
    "myst-parser",
    "myst-nb",
    "sphinx-autodoc-typehints",
]
docsbuild = ["scvi-tools[docs,autotune,hub,jax]"]

# scvi.autotune
autotune = ["hyperopt>=0.2", "ray[tune]", "scib-metrics"]
# scvi.hub dependencies
hub = ["huggingface_hub", "igraph", "leidenalg", "dvc[s3]", "boto3"]
# scvi.data.add_dna_sequence
regseq = ["biopython>=1.81", "genomepy"]
# for files sharing or handling
file_sharing = ["pooch","gdown","readfcs","fcswrite"]
# for parallelization engine
parallel = ["dask[array]", "zarr<3.0.0"]
# for supervised models interpretability
interpretability = ["captum", "shap"]
# for jax support
jax = ["jax", "jaxlib", "optax", "numpyro", "flax"]
# for custom dataloders
dataloaders = ["lamindb", "cellxgene-census", "tiledbsoma", "tiledbsoma_ml", "torchdata"]

optional = [
    "scvi-tools[autotune,hub,jax,file_sharing,regseq,parallel,interpretability]"
]
tutorials = [
    "biomart",
    "cell2location",
    "dataloaders",
    "jupyter",
    "leidenalg",
    "muon",
    "seaborn",
    "matplotlib",
    "plotnine",
    "pynndescent",
    "igraph",
    "scrublet",
    "scvi-tools[optional]",
    "squidpy>=1.6.0",
    "umap-learn>=0.5.0",
]

all = ["scvi-tools[dev,docs,tutorials]"]

[tool.hatch.build.targets.wheel]
packages = ['src/scvi']

[tool.coverage.run]
source = ["scvi"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
markers = [
    "internet: mark tests that requires internet access",
    "optional: mark optional tests, usually take more time",
    "private: mark tests that uses private keys, like HF",
    "multigpu: mark tests that are used to check multi GPU performance",
    "autotune: mark tests that are used to check ray autotune capabilities",
    "custom dataloaders: mark tests that are used to check different custom data loaders",
]

[tool.ruff]
src = ["src"]
line-length = 99
indent-width = 4
target-version = "py312"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
    "PT", # pytest style
    "NPY", # numpy formatting
    "TCH", # flake8-type-checking
    "FA", # flake8-future-annotations
]
ignore = [
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # Raising ValueError is sufficient in tests.
    "PT011",
    # We support np.random functions.
    "NPY002"
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"docs/*" = ["I", "BLE001"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]
"src/scvi/__init__.py" = ["I"]

[tool.ruff.format]
docstring-code-format = true
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.jupytext]
formats = "ipynb,md"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = []
strict = true
