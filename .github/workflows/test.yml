# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: scvi-tools

on:
    push:
        branches: [main, 0.15.x, 0.16.x, 0.17.x, 0.18.x, 0.19.x]
    pull_request:
        branches: [main, 0.15.x, 0.16.x, 0.17.x, 0.18.x, 0.19.x]

jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 20
        strategy:
            matrix:
                python-version: ["3.8", "3.9", "3.10"]

        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache pip
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-v1-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-v1-

            - name: Install dependencies
              id: dependencies
              run: |
                  pip install pytest-cov
                  pip install .[dev,pymde,autotune,hub]

            # Following checks are independent and are run even if one fails
            - name: Lint with flake8
              run: |
                  flake8
              if: ${{ steps.dependencies.outcome == 'success' && always() }}

            - name: Format with black
              run: |
                  black --check .
              if: ${{ steps.dependencies.outcome == 'success' && always() }}

            - name: Import sort
              run: |
                  isort --check-only .
              if: ${{ steps.dependencies.outcome == 'success' && always() }}

            - name: Test with pytest
              env:
                  HF_API_TOKEN: ${{ secrets.HF_API_TOKEN }}
              run: |
                  pytest --cov-report=xml --cov=scvi --internet-tests --color=yes
              if: ${{ steps.dependencies.outcome == 'success' && always() }}
            # --------------------------------------------------------------

            - name: After success
              run: |
                  codecov
                  pip list

            - name: Codacy upload
              env:
                  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
              run: |
                  bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Python -r coverage.xml
              continue-on-error: true
