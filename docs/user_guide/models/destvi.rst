======
DestVI
======

**DestVI** [#ref1]_ (Deconvolution of Spatial Transcriptomics profiles using Variational Inference)
posits a conditional generative model of spatial transcriptomics down to the sub-cell-type variation level which
can be used to explore the spatial organization of a tissue and understanding gene expression variation between tissues and conditions.

The advantages of DestVI are:

    + Can stratify cells into discrete cell types and model continuous sub-cell-type variation.

    + Scalable to very large datasets (>1 million cells).

The disadvantages of DestVI include:

    + Effectively requires a GPU for fast inference.

.. topic:: Tutorial:

 - :doc:`/tutorials/notebooks/DestVI_tutorial`


Preliminaries
=============
DestVI requires training two models, the scLVM (single-cell latent variable model) and the
stLVM (spatial transcriptomic latent variable model). The scLVM takes in as input a scRNA-seq gene
expression matrix of UMI counts :math:`X` with :math:`N` cells and :math:`G` genes, along with
a vector of cell type labels :math:`\vec{c}`. Subsequently, the stLVM takes in the trained scLVM
model, along a spatial gene expression matrix :math:`Y` with :math:`S` spots and :math:`G` genes.
Optionally, the user can specify the number of components used for the mixture model underlying the
emprical prior.


Generative process
==================

scLVM
-----

For cell :math:`n`, the scLVM assumes observed discrete cell type labels :math:`c_n` and models
continuous covariates :math:`\gamma_n` of dimension :math:`d` to explain variation in gene expression within a cell type.
The scLVM posits that the observed UMI counts for cell :math:`n` are generated by the following process:

.. math::
    :nowrap:

    \begin{align}
        \gamma_n &\sim \textrm{Normal}(0, I) \tag{1} \\
        x_{ng} &\sim \textrm{NegativeBinomial}(l_nf^g(c_n, \gamma_n), p_g) \tag{2} \\
    \end{align}

where :math:`l_n` is the library size, :math:`f` is a two-layer neural network which outputs a :math:`G`
dimensional vector, and :math:`p_g` is the rate parameter of the negative binomial distribution for
a given gene :math:`g`. Note that we are using the standard rate-shape parametrization of the
negative binomial here, rather than the mean-dispersian parametrization used in :doc:`/user_guide/models/scvi`.

The latent variables for the scLVM, along with their description are summarized in the following table:

.. list-table::
   :widths: 20 90 15
   :header-rows: 1

   * - Latent variable
     - Description
     - Code variable (if different)
   * - :math:`\gamma_n \in \mathbb{R}^d`
     - Low-dimensional representation of sub-cell-type covariates.
     - ``z``
   * - :math:`p_g \in \mathbb{R}^{+}`
     - Rate parameter for negative binomial distribution.
     - ``px_r``

stLVM
-----

For the stLVM, we also model the expression counts with a :math:`\mathrm{NegativeBinomial}`. However,
for spatial data, we assume that each spot :math:`s` has expression :math:`x_s` composed of gene expression
counts of :math:`C(s)` individual cells. We assume that cell :math:`n` in spot :math:`s` is generated from
the latent variables :math:`(c_{ns}, \gamma_{ns})` by the following process:

.. math::
    :nowrap:

    \begin{align}
        x_{sg} &\sim \mathrm{NegativeBinomial}(l_s\alpha_g\sum_{n=1}^{C(s)}f^g(c_{ns}, \gamma_{ns}), p_g) \tag{3} \\
    \end{align}

where :math:`l_s` is the library size and :math:`\alpha_g` is a correction term for
difference in experimental assays. Like the scLVM, :math:`f` is a decoder neural network, and
:math:`p_g` is the rate parameter for the negative binomial distribution. So, we can model
the cell type abundances :math:`\beta_{sc}` per spot rather than :math:`C(n)` and the
corresponding cell types for each cell, we parametrize the sum from :math:`(3)` over cell types.

.. math::
    :nowrap:

    \begin{align}
        x_{sg} &\sim \mathrm{NegativeBinomial}(l_s\alpha_g\sum_{c=1}^{C}\beta_{sc}f^g(c, \gamma_s^c), p_g) \tag{4} \\
    \end{align}

To avoid the latent variable :math:`\gamma_s^c` from incorporating variation attributed to experimental
assay differences, we assign an empirical prior informed by the scLVM and a corresponding set of
cells of the same cell type in the scRNA-seq dataset. In literature, the prior is referred to as
a VampPrior ("variational aggregated mixture of posteriors" prior) [#ref2]_. More can be read on this prior 
in the DestVI paper.


The latent variables for the stLVM, along with their description are summarized in the following table:

.. list-table::
   :widths: 20 90 15
   :header-rows: 1

   * - Latent variable
     - Description
     - Code variable (if different)
   * - :math:`\alpha_{g} \in \mathbb{R}^{+}`
     - Correction term for technological differences.
     - ``beta``
   * - :math:`\beta_{sc} \in \mathbb{R}^{+}`
     - Spot-specific cell type abundance.
     - ``v_ind``
   * - :math:`\gamma_s^c \in `
     - Inverse dispersion for negative binomial. This can be set to be gene/batch specific for example (and would thus be :math:`\theta_{kg}`), by passing ``dispersion="gene-batch"`` during model intialization. Note that ``px_r`` also refers to the underlying real-valued torch parameter that is then exponentiated on every forward pass of the model.
     - ``gamma``
   * - :math:`p_g \in \mathbb{R}^{+}`
     - Inverse dispersion for negative binomial. This can be set to be gene/batch specific for example (and would thus be :math:`\theta_{kg}`), by passing ``dispersion="gene-batch"`` during model intialization. Note that ``px_r`` also refers to the underlying real-valued torch parameter that is then exponentiated on every forward pass of the model.
     - ``px_o``


Inference
=========

DestVI uses variational inference and specifically auto-encoding variational bayes (see :doc:`/user_guide/background/variational_inference`)
to learn both the model parameters (the neural network params, rate params, etc.) and an approximate posterior distribution
for the scLVM with the following factorization:

 .. math::
    :nowrap:

    \begin{align}
       q_\eta(z_n, \ell_n \mid x_n) :=
       q_\eta(z_n \mid x_n, s_n)q_\eta(\ell_n \mid x_n).
    \end{align}

Here :math:`\eta` is a set of parameters corresponding to inference neural networks (encoders), which we do not describe in detail here,
but are described in the DestVI paper. Like :class:`scvi.model.SCVI`, the underlying class used as the encoder for DestVI is :class:`~scvi.nn.Encoder`.

For the stLVM, DestVI infers point estimates for latent variables :math:`\gamma^c, \alpha, \beta` using a penalized
likelihood method. To regularize :math:`\alpha` a variance penalty is applied across all genes.
To avoid overfitting, DestVI amortizes inference using a neural network to parametrize the latent variables.
Via the ``amortization`` parameter of :class:`scvi.module.MRDeconv`, the user can specify which of
:math:`\beta` and :math:`\gamma^c` will be parametrized by the neural network.


Tasks
=====

Cell type deconvolution
-------------
Once the model is trained, one get retrieve the estimated cell type proportions in each spot using the method::

    >>> proportions = st_model.get_proportions()
    >>> st_adata.obsm["proportions"] = proportions

Subsequently for a given cell type, users can plot a heatmap of the cell type proportions spatially using scanpy with::

    >>> import scanpy as sc
    >>> sc.p1.embedding(st_adata, basis="location", color="B cells")

Intra cell type variation
-------------------------

Users can retrieve the values of :math:`\gamma`, the latent variables corresponding to the
modeled cell-type-specific continuous covariates with::

    >>> gamma = st_model.get_gamma()["B cells"]
    >>> st_adata.obsm["B_cells_gamma"] = gamma

Cell-type-specific gene expression imputation
---------------------------------------------

Assuming the user has identified key gene modules that vary within a cell type of interest, they can
impute the spatial pattern of the cell-type-specific gene expression with::

    >>> # Filter spots with low abundance.
    >>> indices = np.where(st_adata.obsm["proportions"][ct_name].values > 0.03)[0]
    >>> imputed_counts = st_model.get_scale_for_ct("Monocyte", indices=indices)[["Cxcl9", "Cxcl10", "Fcgr1"]]

Comparative analysis between samples
------------------------------------

To perform differential expression across samples, one can apply a frequentist test by taking samples
from the parameters of the generative distribution predicted for each spot in question. More details
can be found in the DestVI paper.


.. topic:: References:

    .. [#ref1] Romain Lopez, Baoguo Li, Hadas Keren-Shaul, Pierre Boyeau, Merav Kedmi, David Pilzer, Adam Jelinski, Eyal David, Allon Wagner, Yoseph Addad, Michael I. Jordan, Ido Amit, Nir Yosef (2021),
        *Multi-resolution deconvolution of spatial transcriptomics data reveals continuous patterns of inflammation*,
        `bioRxiv <https://doi.org/10.1101/2021.05.10.443517>`__.
    .. [#ref2] Jakub Tomczak, Max Welling (2018),
        *VAE with a VampPrior*,
        `International Conference on Artificial Intelligence and Statistics <http://proceedings.mlr.press/v84/tomczak18a/tomczak18a.pdf`__.